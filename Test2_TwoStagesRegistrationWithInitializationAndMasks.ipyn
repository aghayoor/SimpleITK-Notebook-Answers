{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This test runs a two-stages registration process including following stages:\n",
      "\n",
      "1) Rigid\n",
      "\n",
      "2) Affine\n",
      "\n",
      "The main difference between this test and the test 1 is the way that registration process is initialized\n",
      "and the different stages are connected to eachother.\n",
      "Here we use SetMovingInitialTransform() method to initialize the second stage using the output of the\n",
      "firts stage.\n",
      "Also, we use Inplace=False, so at each stage the output transform object is different than the input transform object.\n",
      "We use a composite transform as container to concatenate the initial transform and the outputs of different stages together.\n",
      "\n",
      "Also, here we use fixed and moving images masks to do the registration only on regions of interest."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## Boiler plate code common to many notebooks.  See the TestFilesCommonCode.ipynb for details\n",
      "from __future__ import print_function\n",
      "%run TestFilesCommonCode.ipynb"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "######## WARNING:\n",
      "# You will need to replace the following path with your local BRAINSFit path.\n",
      "BRIANSToolsPath=\"/Users/aghayoor/WorkSpace/BS/release/bin\"\n",
      "BRAINSFitPath=os.path.join(BRIANSToolsPath,\"BRAINSFit\")\n",
      "if not os.path.isfile(BRAINSFitPath):\n",
      "    print(\"ERROR: This script requires that BRAINSFit can be found\")\n",
      "    print(\"{0} does not exists\".format(BRAINSFitPath))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fixedImageFilename = fdata('BRAINSTools/test.nii.gz')\n",
      "movingImageFilename = fdata('BRAINSTools/rotation.test.nii.gz')\n",
      "fixed = sitk.ReadImage(fixedImageFilename,sitk.sitkFloat32)\n",
      "moving = sitk.ReadImage(movingImageFilename, sitk.sitkFloat32)\n",
      "\n",
      "#referenceBaselineImageFilename = fdata('BRAINSTools/BRAINSFitTest_AffineRotationMasks.result.nii.gz')\n",
      "#baseline = sitk.ReadImage(referenceBaselineImageFilename, sitk.sitkFloat32)\n",
      "\n",
      "fixedMaskFilename = fdata(\"BRAINSTools/test_mask.nii.gz\")\n",
      "movingMaskFilename = fdata(\"BRAINSTools/rotation.test_mask.nii.gz\")\n",
      "fixedMask = sitk.ReadImage(fixedMaskFilename, sitk.sitkFloat32)\n",
      "movingMask = sitk.ReadImage(movingMaskFilename, sitk.sitkFloat32)\n",
      "\n",
      "myshow3d(fixed, xslices=[], yslices=[], zslices=[], title=\"fixed\")\n",
      "myshow3d(moving, xslices=[], yslices=[], zslices=[], title=\"moving\")\n",
      "#myshow3d(baseline, xslices=[], yslices=[], zslices=[], title=\"baseline\")\n",
      "myshow3d(fixedMask, xslices=[], yslices=[], zslices=[], title=\"fixed mask\")\n",
      "myshow3d(movingMask, xslices=[], yslices=[], zslices=[], title=\"moving mask\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cshow3d(fixed,moving)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Read the initial transform\n",
      "initialMovingTxFilename = fdata('BRAINSTools/BRAINSFitTest_Initializer_RigidRotationNoMasks.h5')\n",
      "initialMovingTx = sitk.ReadTransform(initialMovingTxFilename)\n",
      "print(\"Initial moving transform: \")\n",
      "print(initialMovingTx)\n",
      "# Define a composite transform that includes the initial transform. \n",
      "# This composite tranform has the container role.\n",
      "ctx = sitk.Transform(initialMovingTx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "BFitOut=os.path.realpath('BFitOut.nii.gz')\n",
      "# RUN THE BRAINSFIT FIRST ######################\n",
      "!{BRIANSToolsPath}/BRAINSFit \\\n",
      "--costMetric MMI \\\n",
      "--numberOfIterations 250,250 \\\n",
      "--numberOfHistogramBins 200 \\\n",
      "--samplingPercentage 0.5 \\\n",
      "--translationScale 250 \\\n",
      "--maximumStepLength 0.5 \\\n",
      "--minimumStepLength 0.01,0.001 \\\n",
      "--outputVolumePixelType float \\\n",
      "--initialTransform {initialMovingTxFilename} \\\n",
      "--transformType Rigid,Affine \\\n",
      "--fixedVolume {fixedImageFilename} \\\n",
      "--movingVolume {movingImageFilename} \\\n",
      "--outputVolume {BFitOut}"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "outputBFit = sitk.ReadImage(BFitOut,sitk.sitkFloat32)\n",
      "myshow3d(outputBFit, xslices=[], yslices=[], zslices=[], title=\"OutputVolume of BRANSFit\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Stage 1\n",
      "# Set the registration filter\n",
      "R = sitk.ImageRegistrationMethod()\n",
      "# Transform of the first stage\n",
      "tx1 = sitk.VersorRigid3DTransform()\n",
      "tx1.SetFixedParameters(initialMovingTx.GetFixedParameters())\n",
      "R.SetInitialTransform(tx1,inPlace=False)\n",
      "# Set the initial transform of this stage\n",
      "R.SetMovingInitialTransform(ctx)\n",
      "# Set the other components of the registration filter\n",
      "R.SetMetricFixedMask(fixedMask)\n",
      "R.SetMetricMovingMask(movingMask)\n",
      "R.SetMetricAsMattesMutualInformation( 200 )\n",
      "R.SetOptimizerAsRegularStepGradientDescent(learningRate =0.5,\n",
      "                                           minStep=1e-2,\n",
      "                                           numberOfIterations=250,\n",
      "                                           gradientMagnitudeTolerance=1e-4,\n",
      "                                           estimateLearningRate=R.Never)\n",
      "R.SetOptimizerScales([1, 1, 1, 1.0/250, 1.0/250, 1.0/250])\n",
      "R.SetInterpolator(sitk.sitkLinear)\n",
      "R.SetMetricSamplingPercentage(0.5)\n",
      "R.SetMetricSamplingStrategy(R.RANDOM)\n",
      "R.SetShrinkFactorsPerLevel([1])\n",
      "R.SetSmoothingSigmasPerLevel([0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "R.RemoveAllCommands()\n",
      "R.AddCommand( sitk.sitkIterationEvent, lambda: command_iteration(R) )\n",
      "outTx = R.Execute(sitk.Cast(fixed,sitk.sitkFloat32), sitk.Cast(moving,sitk.sitkFloat32))\n",
      "\n",
      "print(\"-------\")\n",
      "print(outTx)\n",
      "print(\"Optimizer stop condition: {0}\".format(R.GetOptimizerStopConditionDescription()))\n",
      "print(\" Iteration: {0}\".format(R.GetOptimizerIteration()))\n",
      "print(\" Metric value: {0}\".format(R.GetMetricValue()))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Update the composite transform with the output of the first stage\n",
      "ctx.AddTransform(outTx)\n",
      "cshow3d(fixed,moving,ctx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Stage 2\n",
      "tx2 = sitk.AffineTransform(fixed.GetDimension())\n",
      "tx2.SetFixedParameters(tx1.GetFixedParameters())\n",
      "R.SetInitialTransform(tx2,inPlace=False)\n",
      "R.SetMovingInitialTransform(ctx)\n",
      "# Set a new optimizer\n",
      "R.SetOptimizerAsConjugateGradientLineSearch(learningRate=0.5,\n",
      "                                            numberOfIterations=250,\n",
      "                                            convergenceMinimumValue=1e-6,\n",
      "                                            convergenceWindowSize=10,\n",
      "                                            lineSearchLowerLimit=0,\n",
      "                                            lineSearchUpperLimit=2,\n",
      "                                            lineSearchEpsilon=0.2,\n",
      "                                            lineSearchMaximumIterations=20,\n",
      "                                            estimateLearningRate=R.EachIteration,\n",
      "                                            maximumStepSizeInPhysicalUnits=0.5)\n",
      "R.SetOptimizerScalesFromPhysicalShift()\n",
      "affineOut = R.Execute(fixed,moving)\n",
      "print(\"-------\")\n",
      "print(affineOut)\n",
      "print(\"Optimizer stop condition: {0}\".format(R.GetOptimizerStopConditionDescription()))\n",
      "print(\" Iteration: {0}\".format(R.GetOptimizerIteration()))\n",
      "print(\" Metric value: {0}\".format(R.GetMetricValue()))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Update the composite transform with the output of the second stage\n",
      "ctx.AddTransform(affineOut)\n",
      "cshow3d(fixed,moving,ctx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "compare_with_baseline(fixed,moving,outputBFit,transform=ctx,numberOfPixelsTolerance=777,radiusTolerance=0,intensityTolerance=7)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": null
    }
   ],
   "metadata": {}
  }
 ]
}